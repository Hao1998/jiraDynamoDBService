service: jira-processor-v2

frameworkVersion: ^3.38.0

custom:
  tableName: critical-issues
  queueName: jira-critical-issues
  functionName: jira-processor-v2

provider:
  name: aws
  runtime: nodejs18.x
  stage: prod
  region: us-east-1

  environment:
    NODE_ENV: production
    DYNAMODB_TABLE: ${self:custom.tableName}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

  # Optional: Set log retention at provider level
  logRetentionInDays: 7

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
          Resource: !GetAtt CriticalIssuesTable.Arn

package:
  patterns:
    - '!node_modules/aws-sdk/**'
    - '!tests/**'
    - '!*.test.js'
    - '!coverage/**'
    - '!README.md'
    - '!.git/**'
    - '!.github/**'

functions:
  processCriticalIssues:
    name: ${self:custom.functionName}
    handler: index.handler
    memorySize: 256
    timeout: 60
    reservedConcurrency: 5

    environment:
      LOG_LEVEL: WARN

    events:
      - sqs:
          arn: !GetAtt CriticalIssuesQueue.Arn
          batchSize: 10
          maximumBatchingWindow: 5
          functionResponseType: ReportBatchItemFailures

resources:
  Resources:
    CriticalIssuesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST

        AttributeDefinitions:
          - AttributeName: issueId
            AttributeType: S

        KeySchema:
          - AttributeName: issueId
            KeyType: HASH

        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

        Tags:
          - Key: Project
            Value: personal
          - Key: Environment
            Value: prod

    CriticalIssuesQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}
        VisibilityTimeoutSeconds: 360
        MessageRetentionPeriod: 345600

        RedrivePolicy:
          deadLetterTargetArn: !GetAtt CriticalIssuesDLQ.Arn
          maxReceiveCount: 3

    CriticalIssuesDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.queueName}-dlq
        MessageRetentionPeriod: 345600

    # REMOVED: ProcessorLogGroup - let Lambda create it automatically

    ProcessorErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: jira-processor-v2-errors
        AlarmDescription: "Lambda function errors"
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 5
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:custom.functionName}

  Outputs:
    QueueUrl:
      Description: SQS Queue URL for sending messages
      Value: !Ref CriticalIssuesQueue